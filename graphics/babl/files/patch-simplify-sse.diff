--- extensions/sse-half.c~	2022-11-13 07:45:36.000000000 -0700
+++ extensions/sse-half.c	2023-01-27 19:34:40.000000000 -0700
@@ -18,7 +18,7 @@
 
 #include "config.h"
 
-#if defined(USE_SSE4_1) && defined(USE_F16C) && defined(ARCH_X86_64)
+#if defined(USE_F16C)
 
 #include <immintrin.h>
 
@@ -45,7 +45,7 @@
 
   while (n >= 4)
     {
-      __m128i in_val = _mm_insert_epi64((__m128i)_mm_setzero_ps(), *s_vec++, 0);
+      __m128i in_val = _mm_loadu_si64(s_vec++);
       __v4sf out_val = (__v4sf)_mm_cvtph_ps(in_val);
       _mm_storeu_ps((float *)d_vec++, out_val);
       n -= 4;
@@ -56,9 +56,7 @@
 
   while (n)
     {
-      __m128i in_val = _mm_insert_epi16((__m128i)_mm_setzero_ps(), *src++, 0);
-      __v4sf out_val = (__v4sf)_mm_cvtph_ps(in_val);
-      _mm_store_ss(dst++, out_val);
+      *dst++ = _cvtsh_ss(*src++);
       n -= 1;
     }
 }
@@ -108,7 +106,7 @@
     {
       __m128 in_val = _mm_loadu_ps((float *)s_vec++);
       __m128i out_val = _mm_cvtps_ph(in_val, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
-      _mm_storel_epi64((__m128i *)d_vec++, out_val);
+      _mm_storeu_si64(d_vec++, out_val);
       n -= 4;
     }
 
@@ -117,9 +115,7 @@
 
   while (n)
     {
-      __m128 in_val = _mm_load_ss(src++);
-      __m128i out_val = _mm_cvtps_ph(in_val, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
-      *dst++ = _mm_extract_epi16(out_val, 0);
+      *dst++ = _cvtss_sh(*src++, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC);
       n -= 1;
     }
 }
