--- CMakeLists.txt~	2019-12-23 12:47:43.000000000 -0700
+++ CMakeLists.txt	2023-05-29 23:38:39.000000000 -0600
@@ -448,6 +448,8 @@
   set(CMAKE_RELWITHDEBINFO_POSTFIX ${COIN_DEFAULT_POSTFIX})
   set(CMAKE_DEBUG_POSTFIX ${COIN_DEFAULT_POSTFIX}d)
 
+  set(COIN_PKGCFG_INCLUDE_DIR "${CMAKE_INSTALL_FULL_INCLUEDIR}")
+
   set(COIN_RELEASE_SYSTEM_LIBRARY_NAME Coin${CMAKE_RELEASE_POSTFIX}${COIN_LIBRARY_SUFFIX})
   set(COIN_DEBUG_SYSTEM_LIBRARY_NAME Coin${CMAKE_DEBUG_POSTFIX}${COIN_LIBRARY_SUFFIX})
 elseif(APPLE)
@@ -469,7 +471,8 @@
 
   set(COIN_MAC_FRAMEWORK ${COIN_BUILD_MAC_FRAMEWORK})
   set(COIN_MAC_FRAMEWORK_NAME "Inventor")
-  set(COIN_MAC_FRAMEWORK_PREFIX "${CMAKE_INSTALL_PREFIX}")
+  set(COIN_INSTALL_FRAMEWORKDIR "." CACHE PATH "Directory where ${COIN_MAC_FRAMEWORK_NAME}.framework will be installed.")
+  set(COIN_MAC_FRAMEWORK_PREFIX "${CMAKE_INSTALL_PREFIX}/${COIN_INSTALL_FRAMEWORKDIR}")
   set(COIN_MAC_FRAMEWORK_VERSION "D") # Coin 4 will be "D", to allow parallel installations of Coin3 (if that compiles!)
   set(PACKAGING_FRAMEWORK_NAME ${COIN_MAC_FRAMEWORK_NAME})
 
@@ -481,6 +484,7 @@
     set(COIN_EXTRA_FP_LDFLAGS "-Wl,-F${COIN_MAC_FRAMEWORK_PREFIX}")
     set(COIN_EXTRA_LDFLAGS "${COIN_EXTRA_FP_LDFLAGS} -Wl,-framework,${COIN_MAC_FRAMEWORK_NAME} -Wl,-framework,OpenGL")
   else()
+    set(COIN_PKGCFG_INCLUDE_DIR "${CMAKE_INSTALL_FULL_INCLUEDIR}")
     set(COIN_EXTRA_LDFLAGS " -lCoin -Wl,-framework,OpenGL")
   endif()
 
@@ -494,6 +498,8 @@
 else()
   set(CMAKE_POSITION_INDEPENDENT_CODE ON)
 
+  set(COIN_PKGCFG_INCLUDE_DIR "${CMAKE_INSTALL_FULL_INCLUEDIR}")
+
   set(COIN_RELEASE_SYSTEM_LIBRARY_NAME "$<TARGET_FILE_NAME:Coin>")
   set(COIN_DEBUG_SYSTEM_LIBRARY_NAME "$<TARGET_FILE_NAME:Coin>")
 endif()
--- Coin.pc.cmake.in.orig	2023-05-29 18:49:07.000000000 -0600
+++ Coin.pc.cmake.in	2023-05-29 19:15:14.000000000 -0600
@@ -2,7 +2,8 @@
 exec_prefix=${prefix}
 bindir=@CMAKE_INSTALL_FULL_BINDIR@
 libdir=@CMAKE_INSTALL_FULL_LIBDIR@
-includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@
+includedir=@COIN_PKGCFG_INCLUDE_DIR@
+frameworkdir=@COIN_PKGCFG_FRAMEWORK_DIR@
 datarootdir=@CMAKE_INSTALL_FULL_DATAROOTDIR@
 datadir=@CMAKE_INSTALL_FULL_DATADIR@
 docdir=@CMAKE_INSTALL_FULL_DOCDIR@
@@ -15,7 +16,7 @@
 Version: @PROJECT_VERSION@
 Requires:
 Conflicts:
-Libs: -L${libdir} -lCoin @COIN_EXTRA_LDFLAGS@ @COIN_EXTRA_LIBS@
+Libs: -L${libdir} @COIN_EXTRA_LDFLAGS@ @COIN_EXTRA_LIBS@
 Cflags: -I${includedir} @COIN_EXTRA_CFLAGS@ @COIN_EXTRA_CPPFLAGS@
 
 coin_host=@COIN_HOST_TRIPLE@
--- coin.cfg.cmake.in~	2023-05-29 18:49:07.000000000 -0600
+++ coin.cfg.cmake.in	2023-05-29 19:10:18.000000000 -0600
@@ -10,7 +10,7 @@
 libs="@COIN_EXTRA_LIBS@"
 msvcrt="@CMAKE_MSVC_RUNTIME_LIBRARY@"
 datadir="@CMAKE_INSTALL_FULL_DATAROOTDIR@"
-includedir="@CMAKE_INSTALL_FULL_INCLUDEDIR@"
+includedir="@COIN_PKGCFG_INCLUDE_DIR@"
 frameworkdir="@COIN_PKGCFG_FRAMEWORK_DIR@"
 htmldir="@CMAKE_INSTALL_FULL_DOCDIR@/html"
 compiler="@CMAKE_CXX_COMPILER@"
--- src/CMakeLists.txt~	2023-05-29 18:49:07.000000000 -0600
+++ src/CMakeLists.txt	2023-05-29 19:40:30.000000000 -0600
@@ -337,7 +337,7 @@
 # ############################################################################
 
   install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
-    FRAMEWORK DESTINATION . COMPONENT development
+    FRAMEWORK DESTINATION ${COIN_INSTALL_FRAMEWORKDIR} COMPONENT development
   )
 
 else()
@@ -380,41 +380,51 @@
 # ############################################################################
 
 if(COIN_BUILD_MAC_FRAMEWORK)
-  set(COIN_CONFIG_PACKAGE_LOCATION ${COIN_MAC_FRAMEWORK_NAME}.framework/Resources/CMake)
+  set(COIN_CONFIG_PACKAGE_LOCATION ${COIN_INSTALL_FRAMEWORKDIR}/${COIN_MAC_FRAMEWORK_NAME}.framework/Resources/CMake)
   string(TOLOWER ${COIN_MAC_FRAMEWORK_NAME} COIN_CONFIG_PACKAGE_BASENAME)
 else()
   set(COIN_CONFIG_PACKAGE_LOCATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}-${PROJECT_VERSION})
   string(TOLOWER ${PROJECT_NAME} COIN_CONFIG_PACKAGE_BASENAME)
-  if(UNIX OR MINGW)
-    execute_process(COMMAND sh ${CMAKE_SOURCE_DIR}/cfg/config.guess
-      RESULT_VARIABLE CONFIG_GUESS_RESULT
-      OUTPUT_VARIABLE COIN_HOST_TRIPLE
-      OUTPUT_STRIP_TRAILING_WHITESPACE)
-    if(CMAKE_CXX_COMPILER_ID MATCHES "GCC|Clang|AppleClang")
-      set(COIN_COMPILER_GCC yes)
-    else()
-      set(COIN_COMPILER_GCC no)
-    endif()
-    configure_file(${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.pc.cmake.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY)
-    install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
-    install(FILES ${CMAKE_SOURCE_DIR}/cfg/${PROJECT_NAME_LOWER}.m4 DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/aclocal)
-    configure_file(${CMAKE_SOURCE_DIR}/${PROJECT_NAME_LOWER}.cfg.cmake.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME_LOWER}-${CMAKE_BUILD_TYPE}.cfg @ONLY)
-    install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME_LOWER}-${CMAKE_BUILD_TYPE}.cfg DESTINATION ${CMAKE_INSTALL_DATADIR}/conf)
-    install(FILES ${CMAKE_SOURCE_DIR}/bin/coin-config DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif()
+
+if(UNIX OR MINGW)
+  execute_process(COMMAND sh ${CMAKE_SOURCE_DIR}/cfg/config.guess
+    RESULT_VARIABLE CONFIG_GUESS_RESULT
+    OUTPUT_VARIABLE COIN_HOST_TRIPLE
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+  if(CMAKE_CXX_COMPILER_ID MATCHES "GCC|Clang|AppleClang")
+    set(COIN_COMPILER_GCC yes)
+  else()
+    set(COIN_COMPILER_GCC no)
   endif()
+  configure_file(${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.pc.cmake.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY)
+  install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
+  install(FILES ${CMAKE_SOURCE_DIR}/cfg/${PROJECT_NAME_LOWER}.m4 DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/aclocal)
+  configure_file(${CMAKE_SOURCE_DIR}/${PROJECT_NAME_LOWER}.cfg.cmake.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME_LOWER}-${CMAKE_BUILD_TYPE}.cfg @ONLY)
+  install(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME_LOWER}-${CMAKE_BUILD_TYPE}.cfg DESTINATION ${CMAKE_INSTALL_DATADIR}/conf)
+  install(FILES ${CMAKE_SOURCE_DIR}/bin/coin-config DESTINATION ${CMAKE_INSTALL_BINDIR})
 endif()
 
 # Support find_package(Coin NO_MODULE).
-set(COIN_DOC_DIR ${CMAKE_INSTALL_DOCDIR})
-set(COIN_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
-set(COIN_LIB_DIR ${CMAKE_INSTALL_LIBDIR})
-set(COINDIR ${CMAKE_INSTALL_PREFIX})
+if(COIN_BUILD_MAC_FRAMEWORK)
+  set(COIN_REL_FRAMEWORK_DIR ${COIN_INSTALL_FRAMEWORKDIR}/${COIN_MAC_FRAMEWORK_NAME}.framework/Versions/${COIN_MAC_FRAMEWORK_VERSION})
+  set(COIN_DOC_DIR ${COIN_REL_FRAMEWORK_DIR}/Documentation)
+  set(COIN_INCLUDE_DIR ${COIN_REL_FRAMEWORK_DIR}/Resources/include)
+  set(COIN_LIB_DIR ${COIN_REL_FRAMEWORK_DIR})
+  set(COINDIR ${CMAKE_INSTALL_PREFIX})
+  unset(COIN_REL_FRAMEWORK_DIR)
+else()
+  set(COIN_DOC_DIR ${CMAKE_INSTALL_DOCDIR})
+  set(COIN_LIB_DIR ${CMAKE_INSTALL_LIBDIR})
+  set(COIN_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
+  set(COINDIR ${CMAKE_INSTALL_PREFIX})
+endif()
 
 include(CMakePackageConfigHelpers)
 
 configure_package_config_file(${PROJECT_NAME_LOWER}-config.cmake.in "${CMAKE_CURRENT_BINARY_DIR}/${COIN_CONFIG_PACKAGE_BASENAME}-config.cmake"
   INSTALL_DESTINATION ${COIN_CONFIG_PACKAGE_LOCATION}
-  PATH_VARS COINDIR COIN_INCLUDE_DIR COIN_LIB_DIR COIN_DOC_DIR
+  PATH_VARS COINDIR COIN_PKGCFG_FRAMEWORK_DIR COIN_INCLUDE_DIR COIN_LIB_DIR COIN_DOC_DIR
 )
 
 write_basic_package_version_file("${CMAKE_CURRENT_BINARY_DIR}/${COIN_CONFIG_PACKAGE_BASENAME}-config-version.cmake"
--- src/coin-config.cmake.in~	2019-12-23 12:47:44.000000000 -0700
+++ src/coin-config.cmake.in	2023-06-11 01:20:40.000000000 -0600
@@ -11,7 +11,9 @@
 @PACKAGE_INIT@
 
 set(COIN_BUILD_MAC_FRAMEWORK @COIN_BUILD_MAC_FRAMEWORK@)
-if(NOT COIN_BUILD_MAC_FRAMEWORK)
+if (COIN_BUILD_MAC_FRAMEWORK)
+  set_and_check(Coin_FRAMEWORK_DIR @PACKAGE_COIN_PKGCFG_FRAMEWORK_DIR@)
+endif()
 
 set_and_check(COINDIR "@PACKAGE_COINDIR@")
 set_and_check(Coin_INCLUDE_DIR "@PACKAGE_COIN_INCLUDE_DIR@")
@@ -23,6 +25,7 @@
 endif()
 
 set(COIN_NAME @CMAKE_PROJECT_NAME@)
+set(COIN_MAC_FRAMEWORK_NAME @COIN_MAC_FRAMEWORK_NAME@)
 
 set(COIN_BUILD_SHARED_LIBS @COIN_BUILD_SHARED_LIBS@)
 if(WIN32)
@@ -37,52 +40,67 @@
 set(Coin_BUILD_TYPE @CMAKE_BUILD_TYPE@)
 foreach(configuration IN LISTS Coin_CONFIGURATION_TYPES)
 	if(configuration STREQUAL "Debug")
-		set(Coin_LIBRARY_DEBUG ${COIN_NAME}@CMAKE_DEBUG_POSTFIX@)
+		if(COIN_BUILD_MAC_FRAMEWORK)
+			set(Coin_LIBRARY_DEBUG "${Coin_FRAMEWORK_DIR}")
+		else()
+			set(Coin_LIBRARY_DEBUG ${COIN_NAME}@CMAKE_DEBUG_POSTFIX@)
+		endif()
 	else()
-		set(Coin_LIBRARY_RELEASE ${COIN_NAME}@CMAKE_RELEASE_POSTFIX@)
+		if(COIN_BUILD_MAC_FRAMEWORK)
+			set(Coin_LIBRARY_RELEASE "${Coin_FRAMEWORK_DIR}")
+		else()
+			set(Coin_LIBRARY_RELEASE ${COIN_NAME}@CMAKE_RELEASE_POSTFIX@)
+		endif()
 	endif()
 endforeach()
 
 if(NOT Coin_CONFIGURATION_TYPES)
 	if(Coin_BUILD_TYPE STREQUAL "Debug")
-		set(Coin_LIBRARY_RELEASE ${COIN_NAME}@CMAKE_DEBUG_POSTFIX@)
+		if(COIN_BUILD_MAC_FRAMEWORK)
+			set(Coin_LIBRARY_DEBUG "${Coin_FRAMEWORK_DIR}")
+		else()
+			set(Coin_LIBRARY_DEBUG ${COIN_NAME}@CMAKE_DEBUG_POSTFIX@)
+		endif()
 	else()
-		set(Coin_LIBRARY_RELEASE ${COIN_NAME}@CMAKE_RELEASE_POSTFIX@)
+		if(COIN_BUILD_MAC_FRAMEWORK)
+			set(Coin_LIBRARY_RELEASE "${Coin_FRAMEWORK_DIR}")
+		else()
+			set(Coin_LIBRARY_RELEASE ${COIN_NAME}@CMAKE_RELEASE_POSTFIX@)
+		endif()
 	endif()
 endif()
 
 if(Coin_LIBRARY_RELEASE AND NOT Coin_LIBRARY_DEBUG)
-	set(Coin_LIBRARY_DEBUG   ${Coin_LIBRARY_RELEASE})
-	set(Coin_LIBRARY         ${Coin_LIBRARY_RELEASE})
-	set(Coin_LIBRARIES       ${Coin_LIBRARY_RELEASE})
+	set(Coin_LIBRARY_DEBUG   "${Coin_LIBRARY_RELEASE}")
+	set(Coin_LIBRARY         "${Coin_LIBRARY_RELEASE}")
+	set(Coin_LIBRARIES       "${Coin_LIBRARY_RELEASE}")
 endif()
 
 if(Coin_LIBRARY_DEBUG AND NOT Coin_LIBRARY_RELEASE)
-	set(Coin_LIBRARY_RELEASE ${Coin_LIBRARY_DEBUG})
-	set(Coin_LIBRARY         ${Coin_LIBRARY_DEBUG})
-	set(Coin_LIBRARIES       ${Coin_LIBRARY_DEBUG})
+	set(Coin_LIBRARY_RELEASE "${Coin_LIBRARY_DEBUG}")
+	set(Coin_LIBRARY         "${Coin_LIBRARY_DEBUG}")
+	set(Coin_LIBRARIES       "${Coin_LIBRARY_DEBUG}")
 endif()
 
 if(Coin_LIBRARY_DEBUG AND Coin_LIBRARY_RELEASE)
 	if(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
 		# If the generator supports configuration types then set
 		# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
-		SET(Coin_LIBRARY optimized ${Coin_LIBRARY_RELEASE} debug ${Coin_LIBRARY_DEBUG})
+		SET(Coin_LIBRARY optimized "${Coin_LIBRARY_RELEASE}" debug "${Coin_LIBRARY_DEBUG}")
 	else()
 		# If there are no configuration types and CMAKE_BUILD_TYPE has no value
 		# then just use the release libraries
-		SET(Coin_LIBRARY ${Coin_LIBRARY_RELEASE})
+		SET(Coin_LIBRARY "${Coin_LIBRARY_RELEASE}")
 	endif()
-	set(Coin_LIBRARIES optimized ${Coin_LIBRARY_RELEASE} debug ${Coin_LIBRARY_DEBUG})
+	set(Coin_LIBRARIES optimized "${Coin_LIBRARY_RELEASE}" debug "${Coin_LIBRARY_DEBUG}")
 endif()
 
-set(Coin_LIBRARY ${Coin_LIBRARY} CACHE FILEPATH "The Coin library")
+set(Coin_LIBRARY "${Coin_LIBRARY}" CACHE FILEPATH "The Coin library")
 mark_as_advanced(Coin_LIBRARY_RELEASE Coin_LIBRARY_DEBUG)
 
-endif()
 include(CMakeFindDependencyMacro)
 
-if(NOT COIN_BUILD_SHARED_LIBS)
+if(NOT COIN_BUILD_SHARED_LIBS AND NOT COIN_BUILD_MAC_FRAMEWORK)
 	set(_Boost_FOUND @Boost_FOUND@)
 	if(_Boost_FOUND)
 		find_dependency(Boost)
@@ -147,3 +165,4 @@
 set(Coin_HAVE_THREADS @FEAT_HAVE_THREADS@)
 set(Coin_HAVE_SAFETHREAD @FEAT_HAVE_SAFETHREAD@)
 
+unset(frameworkdir)
