--- VEX/priv/guest_x86_toIR.c~	2018-01-13 10:28:08.000000000 -0800
+++ VEX/priv/guest_x86_toIR.c	2018-01-13 11:14:56.000000000 -0800
@@ -12930,6 +12930,38 @@
    /* --- start of the SSE4 decoder                    --- */
    /* ---------------------------------------------------- */
 
+   /* 66 0F 38 20 /r = PMOVSXBW xmm1, xmm2/m64 
+      Packed Move with Sign Extend from Byte to Word (XMM) */
+   if (sz == 2 && insn[0] == 0x0F && insn[1] == 0x38 && insn[2] == 0x20) {
+      IRTemp srcVec = newTemp(Ity_V128);
+      modrm = insn[3];
+      UInt rG = gregOfRM(modrm);
+      if (epartIsReg(modrm)) {
+         UInt rE = eregOfRM(modrm);
+         assign(srcVec, getXMMReg(rE));
+         delta += 4;
+         DIP("pmovsxbw %s,%s\n", nameXMMReg(rE), nameXMMReg(rG));
+      } else {
+         addr = disAMode(&alen, sorb, delta+3, dis_buf);
+         assign(srcVec, unop(Iop_64UtoV128, loadLE(Ity_I64, mkexpr(addr))));
+         delta += 4+alen-1;
+         DIP("pmovsxbw %s,%s\n", dis_buf, nameXMMReg(rG));
+      }
+
+      IRExpr* res 
+         = binop(Iop_SarN16x8, 
+                 binop(Iop_ShlN16x8, 
+                       binop(Iop_InterleaveLO8x16,
+                             IRExpr_Const(IRConst_V128(0)),
+                             mkexpr(srcVec)),
+                       mkU8(8)),
+                 mkU8(8));
+
+      putXMMReg(rG, res);
+
+      goto decode_success;
+   }
+
    /* 66 0F 3A 0B /r ib = ROUNDSD imm8, xmm2/m64, xmm1
       (Partial implementation only -- only deal with cases where
       the rounding mode is specified directly by the immediate byte.)
@@ -12983,6 +13015,34 @@
       goto decode_success;
    }
 
+   /* 66 0F 3A 22 /r ib = PINSRD xmm1, r/m32, imm8
+      Extract Doubleword int from gen.reg/mem32 and insert into xmm1 */
+   if (sz == 2 && insn[0] == 0x0F && insn[1] == 0x3A && insn[2] == 0x22) {
+      Int lane;
+      t4 = newTemp(Ity_I32);
+      modrm = insn[3];
+
+      if (epartIsReg(modrm)) {
+         assign(t4, getIReg(4, eregOfRM(modrm)));
+         delta += 4+1;
+         lane = insn[4+1-1];
+         DIP("pinsrd $%d,%s,%s\n", lane,
+                                   nameIReg(4,eregOfRM(modrm)),
+                                   nameXMMReg(gregOfRM(modrm)));
+      } else {
+         addr = disAMode ( &alen, sorb, delta+3, dis_buf );
+         delta += 4+alen;
+         lane = insn[4+alen-1];
+         assign(t4, loadLE(Ity_I32, mkexpr(addr)));
+         DIP("pinsrd $%d,%s,%s\n", lane,
+                                   dis_buf,
+                                   nameXMMReg(gregOfRM(modrm)));
+      }
+
+      putXMMRegLane32( gregOfRM(modrm), lane & 3, mkexpr(t4) );
+      goto decode_success;
+   }
+
    /* F3 0F BD -- LZCNT (count leading zeroes.  An AMD extension,
       which we can only decode if we're sure this is an AMD cpu that
       supports LZCNT, since otherwise it's BSR, which behaves
--- VEX/priv/guest_x86_toIR.c~	2018-01-13 14:25:43.000000000 -0800
+++ VEX/priv/guest_x86_toIR.c	2018-01-13 14:31:38.000000000 -0800
