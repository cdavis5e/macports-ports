# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0

name            swig
version         4.1.1
revision        0
checksums       rmd160  ff2415693369f0e8cfb8c9c6bf32ab3d6fd9465e \
                sha256  2af08aced8fcd65cdb5cc62426768914bedc735b1c250325203716f78e39ac9b \
                size    8600805

categories      devel
maintainers     {michaelld @michaelld} openmaintainer

# The swig tool itself is GPL, but code incorporated into dependents has a
# permissive license.
license         {GPL-3+ Permissive}

description     Tool to wrap C/C++ libraries in high-level languages.
long_description \
    SWIG is a software development tool that connects programs written in C \
    and C++ with a variety of high-level programming languages. SWIG is \
    primarily used with common scripting languages such as Perl, Python, \
    Tcl/Tk, Ruby, Guile and MzScheme, however the list of supported languages \
    also includes non-scripting languages such as Java and OCAML. SWIG is \
    most commonly used to create high-level interpreted programming \
    environments, user interfaces, and as a tool for testing and \
    prototyping C/C++ software. SWIG may be freely used, distributed, and \
    modified for commercial and noncommercial use.

homepage        http://www.swig.org/
master_sites    sourceforge:project/swig/swig/swig-${version}

depends_build   port:bison \
                port:gsed

patchfiles-append \
                patch-framework-include.diff

post-patch {
    # The configure script should use GNU sed
    reinplace "s/\[\[:<:\]\]sed\[\[:>:\]\]/gsed/g" ${worksrcpath}/configure
}

build.target

test.run        yes
test.target     check

configure.args-append --without-javascript

array set bindings {
    chicken     {port:chicken           chicken}
    clisp       {port:clisp             clisp}
    csharp      {port:mono              csharp}
    gcj         {port:gcc47             "gcj=${prefix}/bin/gcj-mp-4.7 --with-gcjh=${prefix}/bin/gcjh-mp-4.7"}
    d           {port:phobos            d}
    go          {port:go                go}
    guile       {port:guile-2.2         "guile=${prefix}/bin/guile-2.2 --with-guile-config=${prefix}/bin/guile-config-2.2"}
    java        {{}                     java}
    lua         {port:lua               "lua=${prefix}/bin/lua"}
    ocaml       {port:ocaml             ocaml}
    octave      {path:bin/octave:octave octave}
    perl        {path:bin/perl:perl5    perl5=${prefix}/bin/perl}
    php         {port:php73             "php=${prefix}/bin/php73"}
    pike        {port:pike              pike}
    python      {port:python_select     python}
    r           {port:R                 r}
    ruby        {port:ruby_select       ruby}
    tcl         {port:tcl               tcl}
}
array set prettynames {chicken Chicken clisp CLISP csharp "C#"
    d D gcj GCJ go Go guile Guile java Java lua Lua
    ocaml "Objective Caml" octave Octave perl5 Perl php "PHP 7" pike Pike
    python Python r R ruby Ruby tcl Tcl}

options         swig.lang
default         swig.lang ""

foreach lang [lsort [array names bindings]] {
    set arg      [lindex $bindings($lang) 1]
    set arg_name [lindex [split ${arg} =] 0]
    subport swig-${lang} "
        if {\"[lindex $bindings($lang) 0]\" ne \"\"} {
            depends_lib-append      [lindex $bindings($lang) 0]
        }
        configure.args-append   --with-${arg}
        destroot.args           lib-languages=\"${arg_name}\"
        swig.lang               $arg_name
        platforms               any
        supported_archs         noarch
    "
    if {${swig.lang} ne $arg_name} {
        configure.args-append --without-${arg_name}
    }
}

subport swig-java {
    PortGroup               java 1.0

    java.version            1.4+
    # Set fallback to an LTS Java version
    java.fallback           openjdk8
}

subport swig-php {

    # patch to fix finding of "php-configXY"
    patchfiles-append patch-configure.diff

    set php_suffixes {70 71 72 73 74 80 81 82 83}

    set php_ports {}
    foreach s ${php_suffixes} {
        lappend php_ports php${s}
    }

    foreach s ${php_suffixes} {
        set p php${s}
        set major [string index ${s} 0]
        set v ${major}.[string range ${s} 1 end]
        set i [lsearch -exact ${php_ports} ${p}]
        set c [lreplace ${php_ports} ${i} ${i}]
        if {${s} == 73} {
            variant ${p} description "build using PHP ${v}" conflicts {*}${c} {}
        } else {
            variant ${p} description "build using PHP ${v}" conflicts {*}${c} "
                depends_lib-replace port:php73 port:${p}
                configure.args-replace --with-php=${prefix}/bin/php73 \
                                       --with-php=${prefix}/bin/php${s}
            "
        }
    }

    if {![variant_isset php70] && ![variant_isset php71] &&
        ![variant_isset php72] && ![variant_isset php73] &&
        ![variant_isset php74] && ![variant_isset php80] &&
        ![variant_isset php81] && ![variant_isset php82] &&
        ![variant_isset php83]} {
        default_variants +php73
    }
    if {![variant_isset php70] && ![variant_isset php71] &&
        ![variant_isset php72] && ![variant_isset php73] &&
        ![variant_isset php74] && ![variant_isset php80] &&
        ![variant_isset php81] && ![variant_isset php82] &&
        ![variant_isset php83]} {
        ui_error "\n\nA +phpXY variant must be selected; the variant '-php73' cannot be used alone.\n"
        return -code error "Invalid variant selection"
    }

}

subport swig-gcj {
    variant gcc43 conflicts gcc44 gcc45 gcc47 gcc48 description {build using GCJ 4.3} {
        depends_lib-delete port:gcc47
        depends_lib-append port:gcc43
        configure.args-delete --with-gcj=${prefix}/bin/gcj-mp-4.7 --with-gcjh=${prefix}/bin/gcjh-mp-4.7
        configure.args-append --with-gcj=${prefix}/bin/gcj-mp-4.3 --with-gcjh=${prefix}/bin/gcjh-mp-4.3
    }

    variant gcc44 conflicts gcc43 gcc45 gcc47 gcc48 description {build using GCJ 4.4} {
        depends_lib-delete port:gcc47
        depends_lib-append port:gcc44
        configure.args-delete --with-gcj=${prefix}/bin/gcj-mp-4.7 --with-gcjh=${prefix}/bin/gcjh-mp-4.7
        configure.args-append --with-gcj=${prefix}/bin/gcj-mp-4.4 --with-gcjh=${prefix}/bin/gcjh-mp-4.4
    }

    variant gcc45 conflicts gcc43 gcc44 gcc47 gcc48 description {build using GCJ 4.5} {
        depends_lib-delete port:gcc47
        depends_lib-append port:gcc45
        configure.args-delete --with-gcj=${prefix}/bin/gcj-mp-4.7 --with-gcjh=${prefix}/bin/gcjh-mp-4.7
        configure.args-append --with-gcj=${prefix}/bin/gcj-mp-4.5 --with-gcjh=${prefix}/bin/gcjh-mp-4.5
    }

    # No +gcc46 because the gcc46 port does not build GCJ.

    variant gcc48 conflicts gcc43 gcc44 gcc45 gcc47 description {build using GCJ 4.8} {
        depends_lib-delete port:gcc47
        depends_lib-append port:gcc48
        configure.args-delete --with-gcj=${prefix}/bin/gcj-mp-4.7 --with-gcjh=${prefix}/bin/gcjh-mp-4.7
        configure.args-append --with-gcj=${prefix}/bin/gcj-mp-4.8 --with-gcjh=${prefix}/bin/gcjh-mp-4.8
    }

    # Placeholder variant for the default.
    variant gcc47 conflicts gcc43 gcc44 gcc45 gcc48 description {build using GCJ 4.7} {}

    if {![variant_isset gcc43] && ![variant_isset gcc44] && ![variant_isset gcc45] &&
        ![variant_isset gcc47] && ![variant_isset gcc48]} {
        default_variants +gcc47
    }
    if {![variant_isset gcc43] && ![variant_isset gcc44] && ![variant_isset gcc45] &&
        ![variant_isset gcc47] && ![variant_isset gcc48]} {
        ui_error "\n\nA +gcc4X variant must be selected; the variant '-gcc47' cannot be used alone.\n"
        return -code error "Invalid variant selection"
    }
}

subport swig-ruby {

    set ruby_suffixes {186 187 19 20 21 22 23 24 25 26 27 30 31 32 33}

    set ruby_ports {}
    foreach s ${ruby_suffixes} {
        lappend ruby_ports ruby${s}
    }

    foreach s ${ruby_suffixes} {
        set p ruby${s}
        set major [string index ${s} 0]
        set minor [string index ${s} 1]
        set v ${major}.${minor}.[string range ${s} 2 end]
        set i [lsearch -exact ${ruby_ports} ${p}]
        set c [lreplace ${ruby_ports} ${i} ${i}]
        variant ${p} description "build using Ruby ${v}" conflicts {*}${c} "
            depends_lib-replace port:ruby_select port:${p}
            configure.args-replace --with-ruby=${prefix}/bin/ruby \
                                   --with-ruby=${prefix}/bin/ruby${major}.${minor}
        "
    }

}

if {${swig.lang} eq ""} {
    depends_lib     port:pcre2

    set docdir      ${prefix}/share/doc/${name}-${version}

    destroot.args   lib-languages="typemaps"

    post-destroot {
        xinstall -d ${destroot}${docdir}
        xinstall -m 0644 -W ${worksrcpath} ANNOUNCE CHANGES LICENSE README \
            TODO ${destroot}${docdir}
    }

    variant doc description {Install extra documentation} {
        post-destroot {
            xinstall -d ${destroot}${docdir}/html
            xinstall -m 0644 {*}[glob ${worksrcpath}/Doc/Manual/*.{css,html,pdf,png}] \
                ${destroot}${docdir}/html
        }
    }

    livecheck.type      regex
    livecheck.url       http://swig.org/download.html
    livecheck.regex     The latest release is <.*>${name}-(\\d+(?:\\.\\d+)*)

} else {

    description     $prettynames(${swig.lang}) binding for swig
    long_description    \
        SWIG is a software development tool that connects programs written in C \
        and C++ with a variety of high-level programming languages. This is the \
        $prettynames(${swig.lang}) binding.
    depends_lib-append  port:swig
    livecheck.type      none
    post-destroot {
        delete ${destroot}${prefix}/bin
        delete ${destroot}${prefix}/share/man
        foreach f [glob -directory ${destroot}${prefix}/share/swig/${version} *] {
            if {[file tail $f] != ${swig.lang}} {
                delete $f
            }
        }
    }
}
