--- sources/pyside2/libpyside/pysideqflags.cpp~	2023-01-04 00:07:17.000000000 -0700
+++ sources/pyside2/libpyside/pysideqflags.cpp	2023-06-09 16:41:43.000000000 -0600
@@ -42,6 +42,10 @@
 #include <autodecref.h>
 #include <sbkenum.h>
 
+#if PY_VERSION_HEX < 0x03090000
+#define Py_SET_TYPE(o, t) (void)(Py_TYPE(o) = (t))
+#endif
+
 extern "C" {
     struct SbkConverter;
 
@@ -193,7 +197,7 @@
         newspec.slots = SbkNewQFlagsType_spec.slots;
         auto *obj = SbkType_FromSpec(&newspec);
         auto *type = reinterpret_cast<PyTypeObject *>(obj);
-        obj->ob_type = &PyType_Type;
+        Py_SET_TYPE(obj, &PyType_Type);
 
         PySideQFlagsType *flagsType = reinterpret_cast<PySideQFlagsType *>(type);
         PepType_PFTP(flagsType)->converterPtr = &PepType_PFTP(flagsType)->converter;
--- sources/pyside2/libpyside/pysidesignal.cpp~	2023-01-04 00:07:17.000000000 -0700
+++ sources/pyside2/libpyside/pysidesignal.cpp	2023-06-09 16:34:50.000000000 -0600
@@ -55,6 +55,10 @@
 
 #define QT_SIGNAL_SENTINEL '2'
 
+#if PY_VERSION_HEX < 0x03090000
+#define Py_SET_TYPE(o, t) (void)(Py_TYPE(o) = (t))
+#endif
+
 namespace PySide {
 namespace Signal {
     //aux
@@ -163,7 +167,7 @@
         auto *obj = SbkType_FromSpec(&PySideSignalType_spec);
         type = reinterpret_cast<PyTypeObject *>(obj);
         PyTypeObject *hold = Py_TYPE(type);
-        obj->ob_type = PySideMetaSignalTypeF();
+        Py_SET_TYPE(obj, PySideMetaSignalTypeF());
         Py_INCREF(Py_TYPE(type));
         Py_DECREF(hold);
     }
--- sources/pyside2/libpyside/pysideweakref.cpp~	2023-01-04 00:07:17.000000000 -0700
+++ sources/pyside2/libpyside/pysideweakref.cpp	2023-06-09 16:48:22.000000000 -0600
@@ -42,6 +42,10 @@
 #include <sbkpython.h>
 #include <shiboken.h>
 
+#if PY_VERSION_HEX < 0x03090000
+#define Py_SET_TYPE(o, t) (void)(Py_TYPE(o) = (t))
+#endif
+
 typedef struct {
     PyObject_HEAD
     /* Type-specific fields go here. */
@@ -90,8 +94,8 @@
 
     auto *callableObject_Type = PySideCallableObjectTypeF();
     auto *callableObject_PyObject = reinterpret_cast<PyObject *>(callableObject_Type);
-    if (callableObject_PyObject->ob_type == nullptr) {
-            callableObject_PyObject->ob_type = &PyType_Type;
+    if (Py_TYPE(callableObject_PyObject) == nullptr) {
+            Py_SET_TYPE(callableObject_PyObject, &PyType_Type);
             PyType_Ready(callableObject_Type);
     }
 
--- sources/shiboken2/libshiboken/basewrapper.cpp~	2023-01-04 00:07:17.000000000 -0700
+++ sources/shiboken2/libshiboken/basewrapper.cpp	2023-06-09 15:47:46.000000000 -0600
@@ -64,6 +64,10 @@
 #include <dlfcn.h>
 #endif
 
+#if PY_VERSION_HEX < 0x03090000
+#define Py_SET_TYPE(o, t) (void)(Py_TYPE(o) = (t))
+#endif
+
 namespace {
     void _destroyParentInfo(SbkObject *obj, bool keepReference);
 }
@@ -378,7 +382,7 @@
     if (!type) {
         auto *obj = SbkType_FromSpec(&SbkObject_Type_spec);
         type = reinterpret_cast<PyTypeObject *>(obj);
-        obj->ob_type = SbkObjectType_TypeF();
+        Py_SET_TYPE(obj, SbkObjectType_TypeF());
         Py_INCREF(Py_TYPE(type));
         type->tp_weaklistoffset = offsetof(SbkObject, weakreflist);
         type->tp_dictoffset = offsetof(SbkObject, ob_dict);
@@ -1160,7 +1172,7 @@
     typeSpec->slots[0].pfunc = reinterpret_cast<void *>(baseType ? baseType : SbkObject_TypeF());
 
     PyObject *heaptype = SbkType_FromSpecWithBases(typeSpec, baseTypes);
-    heaptype->ob_type = SbkObjectType_TypeF();
+    Py_SET_TYPE(heaptype, SbkObjectType_TypeF());
     Py_INCREF(Py_TYPE(heaptype));
     auto *type = reinterpret_cast<SbkObjectType *>(heaptype);
 #if PY_VERSION_HEX < 0x03000000
--- sources/shiboken2/libshiboken/sbkenum.cpp~	2023-01-04 00:07:17.000000000 -0700
+++ sources/shiboken2/libshiboken/sbkenum.cpp	2023-06-09 15:56:57.000000000 -0600
@@ -52,6 +52,10 @@
 #include <cstring>
 #include <vector>
 
+#if PY_VERSION_HEX < 0x03090000
+#define Py_SET_TYPE(o, t) (void)(Py_TYPE(o) = (t))
+#endif
+
 #define SbkEnumType_Check(o) (Py_TYPE(Py_TYPE(o)) == SbkEnumType_TypeF())
 typedef PyObject *(*enum_func)(PyObject *, PyObject *);
 
@@ -755,7 +767,7 @@
     auto *obj = SbkType_FromSpecWithBases(&newspec, bases);
     auto *type = reinterpret_cast<PyTypeObject *>(obj);
     PyErr_Print();
-    obj->ob_type = SbkEnumType_TypeF();
+    Py_SET_TYPE(obj, SbkEnumType_TypeF());
 
     auto *enumType = reinterpret_cast<SbkEnumType *>(type);
     PepType_SETP(enumType)->cppName = cppName;
--- sources/shiboken2/libshiboken/sbkstring.cpp~	2023-06-06 12:53:10.000000000 -0600
+++ sources/shiboken2/libshiboken/sbkstring.cpp	2023-06-10 14:24:16.000000000 -0600
@@ -248,7 +248,9 @@
 
 using StaticStrings = std::unordered_set<PyObject *>;
 
+#if PY_VERSION_HEX < 0x030B0000
 static void finalizeStaticStrings();    // forward
+#endif
 
 static StaticStrings &staticStrings()
 {
@@ -256,6 +258,7 @@
     return result;
 }
 
+#if PY_VERSION_HEX < 0x030B0000
 static void finalizeStaticStrings()
 {
     auto &set = staticStrings();
@@ -265,12 +268,15 @@
     }
     set.clear();
 }
+#endif
 
 PyObject *createStaticString(const char *str)
 {
     static bool initialized = false;
     if (!initialized) {
+#if PY_VERSION_HEX < 0x030B0000
         Py_AtExit(finalizeStaticStrings);
+#endif
         initialized = true;
     }
 #if PY_VERSION_HEX >= 0x03000000
--- build_scripts/config.py~	2024-07-15 02:05:14.000000000 -0600
+++ build_scripts/config.py	2024-07-15 04:52:09.000000000 -0600
@@ -94,7 +94,8 @@
             'Programming Language :: Python :: 3.8',
             'Programming Language :: Python :: 3.9',
             'Programming Language :: Python :: 3.10',
-            'Programming Language :: Python :: 3.11'
+            'Programming Language :: Python :: 3.11',
+            'Programming Language :: Python :: 3.12'
         ]
 
         self.setup_script_dir = None
--- sources/shiboken2/libshiboken/signature/signature_helper.cpp~	2023-12-18 05:33:59.000000000 -0700
+++ sources/shiboken2/libshiboken/signature/signature_helper.cpp	2024-07-15 20:00:01.000000000 -0600
@@ -106,6 +106,13 @@
     assert(PyType_Check(type));
     PyType_Ready(type);
     PyObject *dict = type->tp_dict;
+#if PY_VERSION_HEX >= 0x030C0000
+	// dict may be null for built-in types--use PyType_GetDict() for those
+	// cases
+	if (dict == nullptr) {
+        dict = PyType_GetDict(type);
+	}
+#endif
     for (; gsp->name != nullptr; gsp++) {
         PyObject *have_descr = PyDict_GetItemString(dict, gsp->name);
         if (have_descr != nullptr) {
--- sources/pyside2/PySide2/support/generate_pyi.py~	2023-12-18 05:33:59.000000000 -0700
+++ sources/pyside2/PySide2/support/generate_pyi.py	2024-07-15 20:27:36.000000000 -0600
@@ -103,20 +103,22 @@
     """
     def __init__(self, *args):
         Writer.__init__(self, *args)
-        # patching __repr__ to disable the __repr__ of typing.TypeVar:
-        """
-            def __repr__(self):
-                if self.__covariant__:
-                    prefix = '+'
-                elif self.__contravariant__:
-                    prefix = '-'
-                else:
-                    prefix = '~'
-                return prefix + self.__name__
-        """
-        def _typevar__repr__(self):
-            return "typing." + self.__name__
-        typing.TypeVar.__repr__ = _typevar__repr__
+        if sys.version_info[:2] < (3, 12):
+            # patching __repr__ to disable the __repr__ of typing.TypeVar:
+            """
+                def __repr__(self):
+                    if self.__covariant__:
+                        prefix = '+'
+                    elif self.__contravariant__:
+                        prefix = '-'
+                    else:
+                        prefix = '~'
+                    return prefix + self.__name__
+            """
+            # In 3.12, typing.TypeVar is immutable, so we can't do that here.
+            def _typevar__repr__(self):
+                return "typing." + self.__name__
+            typing.TypeVar.__repr__ = _typevar__repr__
 
         # Adding a pattern to substitute "Union[T, NoneType]" by "Optional[T]"
         # I tried hard to replace typing.Optional by a simple override, but
